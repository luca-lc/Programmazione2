let rec f x = function y -> if y = 0 then 1 else x * f x (y-1);;
val f : int -> int -> int = <fun>
# f 2 3;;
- : int = 8
# f 3 3;;
- : int = 27



# (function (x,y) -> 3*x + y) (4,5);;
- : int = 17
# function (x,y) -> 3*x + y;;
- : int * int -> int = <fun>


fun (x,y) -> x * y + x-1 * y-1;;
- : int * int -> int = <fun>
# (fun (x,y) -> (x*y) + (x+1 * y-1)) (2,2);;
- : int = 7


let rec f x = if x = 0 then 1 else x * f (x - 1);;
(fun y -> y * f y) 3;;


let r = function x -> 3*x+x*3;;


let bisucc = ( + ) 2;;


let a = Array.create 3 1;; => a: [| 1; 1; 1 |];;
let a = [|1; 2; 3|] => a: int array = [|1; 2; 3 |];;

let a1 = Array.copy a;; => a1: int array = [| 1; 2; 3 |];;

a.(0) <- 7;; => a: int array = [| 7; 2; 3 |];;

Array.length a1;; => int: 3;;

------------------------------------------------------
* I record in 'Ocaml' corrispondono alla struct di C *
------------------------------------------------------
n := int
x := int
y := int
myOp := int -> int -> int
g := int -> int
f :=  (int -> int) -> int -> int



let myOp x y = (x + y) * x in
let rec f g n = if n = 1 then g
else myOp (g) (f n (n-1)) in
f 10 2;;
